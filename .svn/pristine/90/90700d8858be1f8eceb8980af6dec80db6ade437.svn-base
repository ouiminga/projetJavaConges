/**
 * @author Ouiminga
 *
 */
import java.*; 
import java.util.ArrayList;
import java.util.Scanner;
public class Main {
	/*
  	Berline
	Citadines
	Model4x4
	Monospace
	VehiculeElectrique
	
	Camionette
	VehiculeDeSocite
	
	Moto
	Scooter
	ScooterElectrique
 */
	
	static ArrayList<Client> listClient = new ArrayList<Client>();
	static ArrayList<String> listId = new ArrayList<String>();
	//static ArrayList<Vehicules> listeVehicules = new ArrayList<Vehicules>();
	static ArrayList<Voitures> listModelVoitures = new ArrayList<Voitures>();
	static ArrayList<Utilitaires> listUtilitaires = new ArrayList<Utilitaires>();
	static ArrayList<DeuxRoues> listDeuxRoues = new ArrayList<DeuxRoues>();
	
	static ArrayList<ArrayList> listeDesList = new ArrayList<ArrayList>();
	
	
	static Client nvoCl;
	static Scanner sc = new Scanner(System.in);
	
	/**
	 * 
	 * 
	 * 
	*/
	static void rechercheVehiculeMarqueModel()
	{
		System.out.println("");
		System.out.println("");
				
	}
	
	/**
	  * 
	  */
	/*//Méthode générique !
	static void afficher(ArrayList<? extends Voiture> list){
	for(Voiture v : list)
	System.out.println(v.toString());
	}*/
	static void afficherListingParcAuto()
	{
		System.out.println("Listing complet du parc auto ");
		System.out.println("");
		
		/*listModelVoitures.add(new Berline());
		listModelVoitures.add(new Citadines());
		listModelVoitures.add(new Model4x4());
		listModelVoitures.add(new Monospace());
		listModelVoitures.add(new VehiculeElectrique());
			
		listUtilitaires.add(new Camionette());
		listUtilitaires.add(new VehiculeDeSocite());
		
		listDeuxRoues.add(new Moto());
		listDeuxRoues.add(new Scooter());
		listDeuxRoues.add(new ScooterElectrique());
		
		listeDesList.add(listModelVoitures);
		listeDesList.add(listUtilitaires);
		listeDesList.add(listDeuxRoues);		
		
		static ArrayList<Voitures> listModelVoitures = new ArrayList<Voitures>();
		static ArrayList<Utilitaires> listUtilitaires = new ArrayList<Utilitaires>();
		static ArrayList<DeuxRoues> listDeuxRoues = new ArrayList<DeuxRoues>();
	
		static ArrayList<ArrayList> listeDesList = new ArrayList<ArrayList>();
	
		*/
		for(Voitures v : listModelVoitures)
		{
			System.out.println(v.getModel());
		}
		
		for(Utilitaires u : listUtilitaires)
		{
			System.out.println(u.getModel());
		}	
		
		for(DeuxRoues d : listDeuxRoues)
		{
			System.out.println(d.getModel());
		}	
		
		/*for(ArrayList sousList : listeDesList)
		{
		  i = 0;
		  for(ArrayList str : sousList)
		  {     
		    System.out.println("La valeur de la nouvelle boucle est  : " + str);
		    i++;
		  }
		  j++;
		}*/
	}
	
	/**
	  * 
	  */
	static void afficherLaListeDesClients()
	{
		System.out.println("");
		System.out.println("");
		
	}
	
	/**
	  * 
	  */
	static void afficherListeDesVehiculeEnLocation()
	{
		System.out.println("");
		System.out.println("");
		
	}
	
	/**
	  * 
	  */
	static void ajoutVehiculeAuParc()
	{
		System.out.println("");
		System.out.println("");
		
	}
	
	/**
	  * 
	  */
	static void supprimerVehiculeDuParc()
	{
		System.out.println("");
		System.out.println("");
		
	}
	 
	
	 /**
	  * 
	  */
	static void rechercheVehicule()
	{
		
		String typeVehicule,typeCarburant;
		System.out.println("Recherche un véhicule");
		System.out.println("Entrez le type de véhicule recherché");
		System.out.println("Voitures ,Utilitaires ou Deux roues ");
		typeVehicule=sc.nextLine();
		System.out.println("Entrez le type de carburant recherché");
		System.out.println("diesel,essence,hybride et électrique");
		typeCarburant=sc.nextLine();
		
		switch (typeVehicule)
        {
          case "Voitures":
          case "voitures":
            {
            	switch (typeCarburant)
  	        {
  	          case "diesel":
  	          case "Diesel":
  	            {
  	            	System.out.println("Les voitures à diesel");
  	            	System.out.println(" berline\nmonospace\n");	    	      	        	  
  	            };
  	            break;
  	          case "essence":
  	          case "Essence":
  	            {
  	            	System.out.println("Les voitures à essence");
  	            	System.out.println(" Citadines\nberline\n4x4\n");	    	      	        	  
	    	        };
  	            break; 
  	          case "hybride":
  	          case "Hybride":
  	          	{
  	            	System.out.println("Les voitures hybride");
  	            	System.out.println("monospace\n");
  	            };
  		            break; 
  	          case "electrique":
  	          case "Electrique":
  	          	{
  	            	System.out.println("Les voitures électriques");
  	            	System.out.println("véhicule électrique\n");
  	            };
  		            break;  
  	          default:
  	          	{
  	            	System.out.println("Affichage de toutes les voitures");
  	            	System.out.println(" Citadines\nberline\n4x4\nmonospace\nvéhicule électrique \n");
  	            };           
  	        }
            };
            break;
          case "Utilitaires":
          case "utilitaires":
            {
            	switch (typeCarburant)
  	        {
  	          case "diesel":
  	          case "Diesel":
  	            {
  	            	System.out.println("Les Utilitaires à diesel");
  	            	System.out.println("Camionnette\nVéhicule de société\n");
  	            };
  	            break;
  	          case "essence":
  	          case "Essence":
  	            {
  	            	System.out.println("Les Utilitaires à essence");
  	            	System.out.println("Camionnette\n");
  	            	
  	            };
  	            break; 
  	          case "Hybride":
  	          case "hybride":
  	          	{
  	            	System.out.println("Les Utilitaires hybride");
  	            	System.out.println("Camionnette\nVéhicule de société\n");
  	            };
  		            break; 
  	          case "electrique":
  	          case "Electrique":
  	          	{
  	            	System.out.println("Les Utilitaires électriques");
  	            	System.out.println("Véhicule de société\n");
  	            };
  		            break;  
  	          default:
  	          	{
  	            	System.out.println("Affichage de tous les Utilitaires");
  	            	System.out.println("Camionnette\nVéhicule de société\n");
  	            };           
  	        }
            };
            break; 
          case "Deux roues":
          case "deux roues":
          {
        	switch (typeCarburant)
	        {
	          case "diesel":
	          case "Diesel":
	            {
	            	System.out.println("Les Deux roues à diesel");
	            	System.out.println("Aucun\n");
	        	};
	            break;
	          case "essence":
	          case "Essence":
	            {
	            	System.out.println("Les Deux roues à essence");
	            	System.out.println("Moto\nscooter\n");
	            };
	            break; 
	          case "hybride":
	          case "Hybride":
	          	{
	            	System.out.println("Les Deux roues hybride");
	            	System.out.println("scooter\n");
	            	
	            };
		            break; 
	          case "electrique":
	          case "Electrique":
	          	{
	            	System.out.println("Les Deux roues électriques");
	            	System.out.println("scooter électrique\n");
	            };
		            break;  
	          default:
	          	{
	            	System.out.println("Affichage de tous les deux roues");
	            	System.out.println("Moto\nscooter\nscooter électrique\n");
	            };           
	        }
          };
	            break;  
          default:
          { /*Selectionner selon les carburant selman */
        	switch (typeCarburant)
	        {
	          case "diesel":
	          case "Diesel":
	            {
	            	System.out.println("Tous les vehicules à diesel");
	            	System.out.println("berline\nmonospace\nCamionnette\nVéhicule de société\n");
	            };
	            break;
	          case "essence":
	          case "Essence":
	            {
	            	System.out.println("Tous les vehicules à essence");
	            	System.out.println("Citadines\nberline\n4x4\nCamionnette\nMoto\nscooter\n");
	            };
	            break; 
	          case "hybride":
	          case "Hybride":
	          	{
	            	System.out.println("Tous les vehicules hybride");
	            	System.out.println("monospace\nCamionnette\nVéhicule de société\nscooter\n");
	            };
		            break; 
	          case "Electrique":
	          case "electrique":
	          	{
	            	System.out.println("Tous les vehicules électriques");
	            	System.out.println("véhicule électrique\nVéhicule de société\nscooter électrique\n");
	            };
		            break;  
	          default:
	          	{
	            	System.out.println("Affichage de tous les vehicules");
	            	System.out.println("Citadines, berline, 4x4, monospace, véhicule électrique\n"
	            			+ "Camionnette, Véhicule de société\n"
	            			+ "Moto, scooter, scooter électrique\n");
	            };           
	        }    	        	  
          };             
        }
	}
	
	
	/**
	 * 
	 * 
	 * 
	*/
	static void creerClient(){
	String premierChoix =new String("");			
	String nomNvoClient,prenomNvoClient,adresseNvoClient;
	String idd,pwdd;
	
	boolean exist=false;
	System.out.println("Création d'un compte client");
	System.out.println("Pour vous creer un compte client");
	System.out.println("Entrez votre Nom de client");
	nomNvoClient=sc.nextLine();
	System.out.println("Entrez votre Prenom de client");
	prenomNvoClient=sc.nextLine();
	System.out.println("Entrez votre Adresse de client");
	adresseNvoClient=sc.nextLine();
	nvoCl=new Client(nomNvoClient,prenomNvoClient,adresseNvoClient);
	idd=nomNvoClient+prenomNvoClient;
	pwdd=nomNvoClient+adresseNvoClient.charAt(0);
	
	for(String s:listId)
	{
		if(s.equals(idd))
		{
		exist=true;
		System.out.println("Ce client existe déja");
		break;
		}
	}
	if(exist==false)
	{ 
	System.out.println("Nouveau client");
	listClient.add(nvoCl);
	listId.add(idd);
	}
	//nvoCl.Login(idd,pwdd);
	
	}
	
	/**
	 * 
	 * 
	 * 
	*/
	private static void logMain(){
		
		System.out.println("Log in");
    	String id;String password;
    	boolean bool;
    	boolean existt=false;
    	int curseur=0;
    	
    	
		System.out.println("Entrez l'identifiant/nom");
		id=sc.nextLine();
		System.out.println("Entrez le mot de passe");
		password=sc.nextLine();
		
		for(String ss:listId)
		{ 	
			if(ss.equals(id))
			{
			System.out.println("Id reconnu");
			System.out.println("Le client "+((Client)listClient.get(curseur)).getNom() );
			((Client)listClient.get(curseur)).Login(id,password);
			existt=true;
			break;
			}
			curseur++;	
		}
		if(existt==false)
		{
			System.out.println("Client non reconnu. Si vous n'avez pas de compte veuillez en créer");
			System.out.println("Voulez vous creer \"y\" ?");
			String reponse;
			reponse=sc.nextLine();
			reponse=reponse.charAt(0)+" ";
			if(reponse.equals("y "))
			creerClient();
		}
	}

	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		
		ArrayList<Client> listClient = new ArrayList<Client>();
		ArrayList<String> listId = new ArrayList<String>();
		String premierChoix =new String("");
		Client nvoCl;
		Scanner sc = new Scanner(System.in);
		
		// TODO Auto-generated method stub
		listModelVoitures.add(new Berline());
		listModelVoitures.add(new Citadines());
		listModelVoitures.add(new Model4x4());
		listModelVoitures.add(new Monospace());
		listModelVoitures.add(new VehiculeElectrique());
			
		listUtilitaires.add(new Camionette());
		listUtilitaires.add(new VehiculeDeSocite());
		
		listDeuxRoues.add(new Moto());
		listDeuxRoues.add(new Scooter());
		listDeuxRoues.add(new ScooterElectrique());
		
		listeDesList.add(listModelVoitures);
		listeDesList.add(listUtilitaires);
		listeDesList.add(listDeuxRoues);		
		afficherListingParcAuto();
 		
		/*
		//listeVehicules.add();
		
		//modeles 
	  	Berline berl=new Berline();
		System.out.println(berl.getModel() );
		System.out.println(berl.getMarque() );
		System.out.println(berl.getCarburant() );
		
		Citadines cit=new Citadines();
		System.out.println(cit.getModel() );
		System.out.println(cit.getCarburant() );
		System.out.println(cit.getMarque() );
		
		Model4x4 mod4_4=new Model4x4();
		System.out.println(mod4_4.getModel() );
		System.out.println(mod4_4.getCarburant() );
		System.out.println(mod4_4.getMarque() );
				
		Monospace monoSpa=new Monospace();
		System.out.println(monoSpa.getModel() );
		System.out.println(monoSpa.getCarburant() );
		System.out.println(monoSpa.getMarque() );
				
		VehiculeElectrique vehiElec=new VehiculeElectrique();
		System.out.println(vehiElec.getModel() );
		System.out.println(vehiElec.getCarburant() );
		System.out.println(vehiElec.getMarque() );
				
		Camionette camionn=new Camionette();
		System.out.println(camionn.getModel() );
		System.out.println(camionn.getCarburant() );
		System.out.println(camionn.getMarque() );
				
		VehiculeDeSocite vegicSocc=new VehiculeDeSocite();
		System.out.println(vegicSocc.getModel() );
		System.out.println(vegicSocc.getCarburant() );
		System.out.println(vegicSocc.getMarque() );
		
		Moto mot=new Moto();
		System.out.println(mot.getModel() );
		System.out.println(mot.getCarburant() );
		System.out.println(mot.getMarque() );
		
		Scooter scoo=new Scooter();
		System.out.println(scoo.getModel() );
		System.out.println(scoo.getCarburant() );
		System.out.println(scoo.getMarque() );
		
		ScooterElectrique scooElec=new ScooterElectrique();
	 	System.out.println(scooElec.getModel() );
	 	System.out.println(scooElec.getCarburant() );
	 	System.out.println(scooElec.getMarque() );
	 	while ((!premierChoix.equals("quitter"))&&(!premierChoix.equals("q")))
		{
			System.out.println("\nBienvenue dans notre programme ");
			System.out.println("A tous moment  \"quitter\" ou \"q\" ");
			System.out.println("client ou 1 si vous etes un client");
			System.out.println("gestionnaire ou 2 si vous etes un gestionnaire");
			premierChoix = sc.nextLine();
			if((premierChoix.equals("1"))||(premierChoix.equals("client")))
			{
			do
			{
				System.out.println("Tapez 1 pour créer un compte client");
				System.out.println("Tapez 2 pour vous loguer");
				System.out.println("Tapez 3 pour Recherche un véhicule");
				System.out.println("Tapez 4 pour Louer un véhicule");
				premierChoix = sc.nextLine();
				
				switch (premierChoix)
    	        {
    	          case "1":
    	            {	
    	            	creerClient();
    				};
    	            break;
    	          case "2":
    	            {
    	            	logMain();
    				};
    	            break; 
    	          case "3":
    	        	  rechercheVehicule();
      	              break;
    	          case "4":
    	        	  System.out.println("Location de véhicule");
    	        	  System.out.println("Pour louer un véhicule vous devez vous loguer");
    	        	  logMain();
    	        	  break;  
    	          default:
    	            //Action;             
    	        }
			}while ((!premierChoix.equals("quitter"))&&(!premierChoix.equals("q"))&&(!premierChoix.equals("1"))&&(!premierChoix.equals("2"))&&(!premierChoix.equals("3"))&&(!premierChoix.equals("4")));
			}
			else
			{	if((premierChoix.equals("2"))||(premierChoix.equals("gestionnaire")))
				{
	 		
	 			do
				{
					System.out.println("Tapez 1 pour créer un compte client");
					System.out.println("Tapez 2 pour vous loguer");
					System.out.println("Tapez 3 pour Recherche un véhicule");
					System.out.println("Tapez 4 pour Louer un véhicule");
					premierChoix = sc.nextLine();
					premierChoix="2";
					switch (premierChoix)
	    	        {
	    	          case "1":
		    	           	// Rechercher un véhicule par plusieurs critères 
		    	           	// (type de véhicule, par carburant, par marque 
		    	           	// et model)
		    	           	 
	    	        	  rechercheVehiculeMarqueModel();
	    	        	  break;
	    	          case "2":
	    	        	  	//Afficher un listing complet du parc auto
	    	        	  System.out.println("afficherListingParcAuto");
	    	        	  afficherListingParcAuto();
	    	            break; 
	    	          case "3":
	    	        	  //Afficher la liste des clients.
	    	        	  afficherLaListeDesClients();
	      	              break;
	    	          case "4":
	    	        	  //Afficher la liste des véhicule 
	    	        	  //en location (afficher une liste
	    	        	  //de couples Véhicules/Client loueur)
	    	        	  afficherListeDesVehiculeEnLocation();
	    	        	  break;
	    	          case "5":
	    	        	  //Ajouter un véhicule au parc.
	    	        	  ajoutVehiculeAuParc();
	      	              break;
	    	          case "6":
	    	        	  //Supprimer un véhicule du parc.
	    	        	  supprimerVehiculeDuParc();
	      	              break;
	    	          default:
	    	            //Action;             
	    	        }
				}while ((!premierChoix.equals("quitter"))&&(!premierChoix.equals("q"))&&(!premierChoix.equals("1"))&&(!premierChoix.equals("2"))&&(!premierChoix.equals("3"))&&(!premierChoix.equals("4")));

				}
			}
		}*/
		System.out.println("Fin du programme");
	}
}
